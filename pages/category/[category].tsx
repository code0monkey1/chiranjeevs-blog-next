import { AxiosResponse } from 'axios';
import { GetServerSideProps } from 'next';
import Head from 'next/head';
import { useRouter } from 'next/router';
import qs from 'qs';
import React from 'react';
import { fetchArticles, fetchCategories } from "../../api";
import ArticleList from '../../components/ArticleList';
import Pagination from '../../components/Pagination';
import Tabs from '../../components/Tabs';
import {
    IArticle,
    ICategory,
    ICollectionResponse,
    IPagination,
    IQueryOptions
} from '../../types';
import { capitalizeFirstLetter, debounce, makeCategory } from '../../utils';

interface IPropType {
    categories: {
        items: ICategory[];
        pagination: IPagination;
    };
    articles: {
        items: IArticle[];
        pagination: IPagination;
    };
    slug: string;
}

const Category = ({ categories, articles, slug }: IPropType) => {
    
    const { page, pageCount } = articles.pagination;
    const router = useRouter()
    const { category: categorySlug } = router.query;

    const formattedCategory = () => {
        return capitalizeFirstLetter(makeCategory(slug));
    };
    const handleSearch = (query: string) => {
        
        // every time you push things into the router 
        // you re-trigger the getServerSideProps function 
        // which fetches new date from the server according to the 
        // query string 
        
        router.push(`/category/${categorySlug}/?search=${query}`);
    };
    return (
        <>
            <Head>
                <title>Chiranjeev`s Blog | {formattedCategory()}</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <Tabs
                categories={categories.items}
                handleOnSearch={debounce(handleSearch, 500)}
            />
            <ArticleList articles={articles.items} />
            <Pagination
                page={page}
                pageCount={pageCount}
                redirectUrl={`/category/${categorySlug}`}
            />
        </>
    );
};

export const getServerSideProps: GetServerSideProps = async ({ query }) => {
     
 // the query is fetched from the url query parameters

    const options: IQueryOptions = {
        populate: ['author.avatar'],
        sort: ['id:desc'],
        filters: {
            category: {
                slug: query.category,
            },
        },
        pagination: {
            page: query.page ? +query.page : 1,
            pageSize: 4,
        },
    };

    if (query.search) {
      console.log("The query is",JSON.stringify(query,null,2))
        options.filters = {

            Title: {
                $containsi: query.search,
            },
            
        };
    }

    const queryString = qs.stringify(options);

    const { data: articles }: AxiosResponse<ICollectionResponse<IArticle[]>> =
        await fetchArticles(queryString);

    const {
        data: categories,
    }: AxiosResponse<ICollectionResponse<ICategory[]>> =
        await fetchCategories();

    return {
        props: {
            categories: {
                items: categories.data,
                pagination: categories.meta.pagination,
            },
            articles: {
                items: articles.data,
                pagination: articles.meta.pagination,
            },
            slug: query.category,
        },
    };
};

export default Category;